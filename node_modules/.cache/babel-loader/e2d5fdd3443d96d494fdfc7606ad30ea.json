{"ast":null,"code":"import { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext, createReduxContextHook } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook() {\n  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  var useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore() {\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store; // @ts-ignore\n\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport var useStore = /*#__PURE__*/createStoreHook();","map":{"version":3,"sources":["D:/JS-React/dimshishlik_new_v4/react-course-app/node_modules/react-redux/es/hooks/useStore.js"],"names":["ReactReduxContext","useReduxContext","useDefaultReduxContext","createReduxContextHook","createStoreHook","context","useStore","store"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,uBAAlC;AACA,SAASC,eAAe,IAAIC,sBAA5B,EAAoDC,sBAApD,QAAkF,mBAAlF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,GAAsD;AAAA,MAA7BC,OAA6B,uEAAnBL,iBAAmB;AAC3D,MAAMC,eAAe,GAAG;AACxBI,EAAAA,OAAO,KAAKL,iBAAZ,GAAgCE,sBAAhC,GAAyD;AACzDC,EAAAA,sBAAsB,CAACE,OAAD,CAFtB;AAGA,SAAO,SAASC,QAAT,GAAoB;AACzB,2BAEIL,eAAe,EAFnB;AAAA,QACEM,KADF,oBACEA,KADF,CADyB,CAGF;;;AAEvB,WAAOA,KAAP;AACD,GAND;AAOD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMD,QAAQ,GAAG,aAAaF,eAAe,EAA7C","sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext, createReduxContextHook } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook(context = ReactReduxContext) {\n  const useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore() {\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();"]},"metadata":{},"sourceType":"module"}