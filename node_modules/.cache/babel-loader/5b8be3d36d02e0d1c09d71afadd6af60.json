{"ast":null,"code":"import { useCallback, useDebugValue, useRef } from 'react';\nimport { createReduxContextHook, useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : createReduxContextHook(context);\n  return function useSelector(selector) {\n    let equalityFnOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      equalityFn = refEquality,\n      stabilityCheck = undefined,\n      noopCheck = undefined\n    } = typeof equalityFnOrOptions === 'function' ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck: globalStabilityCheck,\n      noopCheck: globalNoopCheck\n    } = useReduxContext();\n    const firstRun = useRef(true);\n    const wrappedSelector = useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const finalStabilityCheck = typeof stabilityCheck === 'undefined' ? globalStabilityCheck : stabilityCheck;\n\n          if (finalStabilityCheck === 'always' || finalStabilityCheck === 'once' && firstRun.current) {\n            const toCompare = selector(state);\n\n            if (!equalityFn(selected, toCompare)) {\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' + '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization', {\n                state,\n                selected,\n                selected2: toCompare\n              });\n            }\n          }\n\n          const finalNoopCheck = typeof noopCheck === 'undefined' ? globalNoopCheck : noopCheck;\n\n          if (finalNoopCheck === 'always' || finalNoopCheck === 'once' && firstRun.current) {\n            // @ts-ignore\n            if (selected === state) {\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned the root state when called. This can lead to unnecessary rerenders.' + '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.');\n            }\n          }\n\n          if (firstRun.current) firstRun.current = false;\n        }\n\n        return selected;\n      }\n\n    }[selector.name], [selector, globalStabilityCheck, stabilityCheck]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();","map":{"version":3,"sources":["C:/Progect/DimShashlik/node_modules/react-redux/es/hooks/useSelector.js"],"names":["useCallback","useDebugValue","useRef","createReduxContextHook","useReduxContext","useDefaultReduxContext","ReactReduxContext","notInitialized","useSyncExternalStoreWithSelector","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","context","useSelector","selector","equalityFnOrOptions","equalityFn","stabilityCheck","undefined","noopCheck","process","env","NODE_ENV","Error","store","subscription","getServerState","globalStabilityCheck","globalNoopCheck","firstRun","wrappedSelector","name","state","selected","finalStabilityCheck","current","toCompare","console","warn","selected2","finalNoopCheck","selectedState","addNestedSub","getState"],"mappings":"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","sourcesContent":["import { useCallback, useDebugValue, useRef } from 'react';\r\nimport { createReduxContextHook, useReduxContext as useDefaultReduxContext } from './useReduxContext';\r\nimport { ReactReduxContext } from '../components/Context';\r\nimport { notInitialized } from '../utils/useSyncExternalStore';\r\nlet useSyncExternalStoreWithSelector = notInitialized;\r\nexport const initializeUseSelector = fn => {\r\n  useSyncExternalStoreWithSelector = fn;\r\n};\r\n\r\nconst refEquality = (a, b) => a === b;\r\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\r\n\r\n\r\nexport function createSelectorHook(context = ReactReduxContext) {\r\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : createReduxContextHook(context);\r\n  return function useSelector(selector, equalityFnOrOptions = {}) {\r\n    const {\r\n      equalityFn = refEquality,\r\n      stabilityCheck = undefined,\r\n      noopCheck = undefined\r\n    } = typeof equalityFnOrOptions === 'function' ? {\r\n      equalityFn: equalityFnOrOptions\r\n    } : equalityFnOrOptions;\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!selector) {\r\n        throw new Error(`You must pass a selector to useSelector`);\r\n      }\r\n\r\n      if (typeof selector !== 'function') {\r\n        throw new Error(`You must pass a function as a selector to useSelector`);\r\n      }\r\n\r\n      if (typeof equalityFn !== 'function') {\r\n        throw new Error(`You must pass a function as an equality function to useSelector`);\r\n      }\r\n    }\r\n\r\n    const {\r\n      store,\r\n      subscription,\r\n      getServerState,\r\n      stabilityCheck: globalStabilityCheck,\r\n      noopCheck: globalNoopCheck\r\n    } = useReduxContext();\r\n    const firstRun = useRef(true);\r\n    const wrappedSelector = useCallback({\r\n      [selector.name](state) {\r\n        const selected = selector(state);\r\n\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          const finalStabilityCheck = typeof stabilityCheck === 'undefined' ? globalStabilityCheck : stabilityCheck;\r\n\r\n          if (finalStabilityCheck === 'always' || finalStabilityCheck === 'once' && firstRun.current) {\r\n            const toCompare = selector(state);\r\n\r\n            if (!equalityFn(selected, toCompare)) {\r\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' + '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization', {\r\n                state,\r\n                selected,\r\n                selected2: toCompare\r\n              });\r\n            }\r\n          }\r\n\r\n          const finalNoopCheck = typeof noopCheck === 'undefined' ? globalNoopCheck : noopCheck;\r\n\r\n          if (finalNoopCheck === 'always' || finalNoopCheck === 'once' && firstRun.current) {\r\n            // @ts-ignore\r\n            if (selected === state) {\r\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned the root state when called. This can lead to unnecessary rerenders.' + '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.');\r\n            }\r\n          }\r\n\r\n          if (firstRun.current) firstRun.current = false;\r\n        }\r\n\r\n        return selected;\r\n      }\r\n\r\n    }[selector.name], [selector, globalStabilityCheck, stabilityCheck]);\r\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\r\n    useDebugValue(selectedState);\r\n    return selectedState;\r\n  };\r\n}\r\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\r\n\r\nexport const useSelector = /*#__PURE__*/createSelectorHook();"]},"metadata":{},"sourceType":"module"}