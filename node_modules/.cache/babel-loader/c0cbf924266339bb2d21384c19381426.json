{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"D:\\\\JS-React\\\\dimshishlik_new_v4\\\\react-course-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\JS-React\\\\dimshishlik_new_v4\\\\react-course-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport utils from './../utils.js';\n\nvar InterceptorManager = /*#__PURE__*/function () {\n  function InterceptorManager() {\n    _classCallCheck(this, InterceptorManager);\n\n    this.handlers = [];\n  }\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n\n\n  _createClass(InterceptorManager, [{\n    key: \"use\",\n    value: function use(fulfilled, rejected, options) {\n      this.handlers.push({\n        fulfilled: fulfilled,\n        rejected: rejected,\n        synchronous: options ? options.synchronous : false,\n        runWhen: options ? options.runWhen : null\n      });\n      return this.handlers.length - 1;\n    }\n    /**\n     * Remove an interceptor from the stack\n     *\n     * @param {Number} id The ID that was returned by `use`\n     *\n     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n     */\n\n  }, {\n    key: \"eject\",\n    value: function eject(id) {\n      if (this.handlers[id]) {\n        this.handlers[id] = null;\n      }\n    }\n    /**\n     * Clear all interceptors from the stack\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this.handlers) {\n        this.handlers = [];\n      }\n    }\n    /**\n     * Iterate over all the registered interceptors\n     *\n     * This method is particularly useful for skipping over any\n     * interceptors that may have become `null` calling `eject`.\n     *\n     * @param {Function} fn The function to call for each interceptor\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      utils.forEach(this.handlers, function forEachHandler(h) {\n        if (h !== null) {\n          fn(h);\n        }\n      });\n    }\n  }]);\n\n  return InterceptorManager;\n}();\n\nexport default InterceptorManager;","map":{"version":3,"sources":["D:/JS-React/dimshishlik_new_v4/react-course-app/node_modules/axios/lib/core/InterceptorManager.js"],"names":["utils","InterceptorManager","handlers","fulfilled","rejected","options","push","synchronous","runWhen","length","id","fn","forEach","forEachHandler","h"],"mappings":"AAAA;;;;AAEA,OAAOA,KAAP,MAAkB,eAAlB;;IAEMC,kB;AACJ,gCAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,aAAIC,SAAJ,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AAChC,WAAKH,QAAL,CAAcI,IAAd,CAAmB;AACjBH,QAAAA,SAAS,EAATA,SADiB;AAEjBC,QAAAA,QAAQ,EAARA,QAFiB;AAGjBG,QAAAA,WAAW,EAAEF,OAAO,GAAGA,OAAO,CAACE,WAAX,GAAyB,KAH5B;AAIjBC,QAAAA,OAAO,EAAEH,OAAO,GAAGA,OAAO,CAACG,OAAX,GAAqB;AAJpB,OAAnB;AAMA,aAAO,KAAKN,QAAL,CAAcO,MAAd,GAAuB,CAA9B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,eAAMC,EAAN,EAAU;AACR,UAAI,KAAKR,QAAL,CAAcQ,EAAd,CAAJ,EAAuB;AACrB,aAAKR,QAAL,CAAcQ,EAAd,IAAoB,IAApB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAQ;AACN,UAAI,KAAKR,QAAT,EAAmB;AACjB,aAAKA,QAAL,GAAgB,EAAhB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAAQS,EAAR,EAAY;AACVX,MAAAA,KAAK,CAACY,OAAN,CAAc,KAAKV,QAAnB,EAA6B,SAASW,cAAT,CAAwBC,CAAxB,EAA2B;AACtD,YAAIA,CAAC,KAAK,IAAV,EAAgB;AACdH,UAAAA,EAAE,CAACG,CAAD,CAAF;AACD;AACF,OAJD;AAKD;;;;;;AAGH,eAAeb,kBAAf","sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n"]},"metadata":{},"sourceType":"module"}